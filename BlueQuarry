package org.firstinspires.ftc.teamcode.Autonomous;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.HardwareMap;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.teamcode.EasyOpenCV.CustomSkystoneDetector;
import com.qualcomm.robotcore.util.Hardware;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

@Autonomous(name = "BlueQuarryFINAL")
public class BlueQuarryFINAL extends LinearOpMode {
    private DcMotor FR = null;
    private DcMotor FL = null;
    private DcMotor BR = null;
    private DcMotor BL = null;
    private Servo StoneL = null;
    private Servo StoneR = null;
    private Servo AutoGrabL = null;
    private Servo FoundationServoR = null;
    private Servo FoundationServoL = null;
    private ElapsedTime runtime = new ElapsedTime();
    //private Telemetry telemetry = null;
    static final double TICKS_PER_REV = 537.6;    // eg: TETRIX Motor Encoder
    static final double DRIVE_GEAR_REDUCTION = 0.892;     // This is < 1.0 if geared UP
    static final double WHEEL_DIAMETER_INCHES = 3.93701;     // For figuring circumference
    static final double COUNTS_PER_INCH = (TICKS_PER_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);

    static final double DRIVE_SPEED = 0.6;
    static final double TURN_SPEED = 0.5;

    @Override
    public void runOpMode() throws InterruptedException
    {
        FL = hardwareMap.dcMotor.get("FL");
        FR = hardwareMap.dcMotor.get("FR");
        BR = hardwareMap.dcMotor.get("BR");
        BL = hardwareMap.dcMotor.get("BL");
        StoneL = hardwareMap.servo.get("StoneL");
        StoneR = hardwareMap.servo.get("StoneR");
        AutoGrabL = hardwareMap.servo.get("AutoGrabL");
        FoundationServoL = hardwareMap.servo.get("FoundationServoL");
        FoundationServoR = hardwareMap.servo.get("FoundationServoR");

        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        FR.setDirection(DcMotor.Direction.REVERSE);
        BR.setDirection(DcMotor.Direction.REVERSE);

        SkystoneDetectorCV detector = new SkystoneDetectorCV();
        String SkystonePos ="";
        telemetry.addData("Main Program - Position-Init",SkystonePos );
        telemetry.addLine("Ready To Start");
        telemetry.update();

        SkystonePos = detector.getSkystonePos(this.hardwareMap ,this,"BLUE");

        // start
        waitForStart();
        //start

        strafeDrive(.2,-2,2,30);
        encoderDrive(.3,12,12,30); //move foreward 8 inches for Detection//
        AutoGrabL.setPosition(0);//open the clamp of grabber
        FoundationServoL.setPosition(.15);
        FoundationServoR.setPosition(.85);


        telemetry.addData("Main Program - Position-RunTime",SkystonePos );
        telemetry.update();

        //SkystonePos="left";
        if ( SkystonePos.equals("left")){
            encoderDrive(.4,24,-24,30);//Turn 90 degrees left
            encoderDrive(.4,-8,-8,30);//Move forward to left skystone
            strafeDrive(.35,21,-21,30); //Strafe towards Skystone
            StoneL.setPosition(.6);
            sleep(750);
            AutoGrabL.setPosition(.75);
            sleep(1000); //pickup Stone
            StoneL.setPosition(1);
            strafeDrive(.2,-8.0,8.0,30);//Coming away from quarry with Stone
            encoderDrive(.6,-92,-92,30);//Moving toward building site and foundation
            strafeDrive(.4,10,-10,30);//Strafe towards the foundation
            StoneL.setPosition(.86); //Drop arm
            sleep(70);
            AutoGrabL.setPosition(0);//drop the stone
            sleep(100);
            StoneL.setPosition(1);//lift the arm
            sleep(50);
            AutoGrabL.setPosition(.75);//close the grabber
            strafeDrive(.4,-10,10,30);//strafe away from foundation
            encoderDrive(.6,20,20,30);//Moving toward building site and foundation
            encoderDrive(.4,24,-24,30);//turning so can move forward and pull foundation
            encoderDrive(.4,-15,-15,30);
            FoundationServoL.setPosition(.8); //Grabbing Foundation
            FoundationServoR.setPosition(.2);
            sleep(1000);
            splineDrive(.07,.2,5,18,30);
            encoderDrive(.3,20,20,30);
            encoderDrive(.3,-27,27,30);
            FoundationServoL.setPosition(.15);
            FoundationServoR.setPosition(.85);
            sleep(100);
            encoderDrive(.4,-25,-25,30);
            strafeDrive(.4,-18,18,30);
            strafeDrive(.4,28,-28,30);
            encoderDrive(.6,42,42,30);
        }
        else if (SkystonePos.equals("middle")){
            encoderDrive(.4,24,-24,30);//Turn 90 degrees left
            encoderDrive(.4,1,1,30);//Move forward to left skystone
            strafeDrive(.35,21,-21,30); //Strafe towards Skystone
            StoneL.setPosition(.6);
            sleep(750);
            AutoGrabL.setPosition(.75);
            sleep(1000); //pickup Stone
            StoneL.setPosition(1);
            strafeDrive(.2,-8.0,8.0,30);//Coming away from quarry with Stone
            encoderDrive(.6,-100,-100,30);//Moving toward building site and foundation
            strafeDrive(.4,10,-10,30);//Strafe towards the foundation
            StoneL.setPosition(.86); //Drop arm
            sleep(70);
            AutoGrabL.setPosition(0);//drop the stone
            sleep(100);
            StoneL.setPosition(1);//lift the arm
            sleep(50);
            AutoGrabL.setPosition(.75);//close the grabber
            strafeDrive(.4,-10,10,30);//strafe away from foundation
            encoderDrive(.6,17,17,30);//Moving toward building site and foundation
            encoderDrive(.4,24,-24,30);//turning so can move forward and pull foundation
            encoderDrive(.4,-15,-15,30);
            FoundationServoL.setPosition(.8); //Grabbing Foundation
            FoundationServoR.setPosition(.2);
            sleep(1000);
            splineDrive(.07,.2,5,18,30);
            encoderDrive(.3,20,20,30);
            encoderDrive(.3,-27,27,30);
            FoundationServoL.setPosition(.15);
            FoundationServoR.setPosition(.85);
            sleep(100);
            encoderDrive(.4,-25,-25,30);
            strafeDrive(.4,-18,18,30);
            strafeDrive(.4,28,-28,30);
            encoderDrive(.6,43,43,30);
        }




        else { //right position
            encoderDrive(.4,24,-24,30);//Turn 90 degrees left
            encoderDrive(.4,7,7,30);//Move forward to left skystone
            strafeDrive(.35,21,-21,30); //Strafe towards Skystone
            StoneL.setPosition(.6);
            sleep(750);
            AutoGrabL.setPosition(.75);
            sleep(1000); //pickup Stone
            StoneL.setPosition(1);
            strafeDrive(.2,-8.0,8.0,30);//Coming away from quarry with Stone
            encoderDrive(.6,-108,-108,30);//Moving toward building site and foundation
            strafeDrive(.4,10,-10,30);//Strafe towards the foundation
            StoneL.setPosition(.86); //Drop arm
            sleep(70);
            AutoGrabL.setPosition(0);//drop the stone
            sleep(100);
            StoneL.setPosition(1);//lift the arm
            sleep(50);
            AutoGrabL.setPosition(.75);//close the grabber
            strafeDrive(.4,-10,10,30);//strafe away from foundation
            encoderDrive(.6,17,17,30);//Moving toward building site and foundation
            encoderDrive(.4,24,-24,30);//turning so can move forward and pull foundation
            encoderDrive(.4,-15,-15,30);
            FoundationServoL.setPosition(.8); //Grabbing Foundation
            FoundationServoR.setPosition(.2);
            sleep(1000);
            splineDrive(.07,.2,5,18,30);
            encoderDrive(.3,20,20,30);
            encoderDrive(.3,-27,27,30);
            FoundationServoL.setPosition(.15);
            FoundationServoR.setPosition(.85);
            sleep(100);
            encoderDrive(.4,-25,-25,30);

            strafeDrive(.4,-18,18,30);
            strafeDrive(.4,28,-28,30);
            encoderDrive(.6,43,43,30);

        }

    }
    //Encoder Drive and Strafe Drive Methods:

    //Encoder Drive method
    public void encoderDrive(double speed,
                             double leftInches, double rightInches,
                             double timeoutS)
    {

        int newLeftFrontTarget = 0;
        int newRightFrontTarget = 0;
        int newLeftBackTarget = 0;
        int newRightBackTarget= 0;

        // Ensure that the opmode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller

            newLeftFrontTarget = FL.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newRightFrontTarget = FR.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            newLeftBackTarget = BL.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newRightBackTarget = BR.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);

            FR.setTargetPosition(newRightFrontTarget);
            FL.setTargetPosition(newLeftFrontTarget);
            BR.setTargetPosition(newRightBackTarget);
            BL.setTargetPosition(newLeftBackTarget);

            // Turn On RUN_TO_POSITION
            FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            FR.setPower(Math.abs(speed));
            FL.setPower(Math.abs(speed));
            BR.setPower(Math.abs(speed));
            BL.setPower(Math.abs(speed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test.
            while (opModeIsActive() &&
                    (runtime.seconds() < 31.0) &&
                    (FR.isBusy() && FL.isBusy() && (BR.isBusy() && (BL.isBusy())))) {

                // Display it for the driver.
                telemetry.addData("Path1",  "Running to %7d :%7d", newLeftFrontTarget,  newRightFrontTarget);
                telemetry.addData("Path2",  "Running at %7d :%7d", newLeftBackTarget, newRightBackTarget);

                telemetry.update();
            }

            // Stop all motion;
            FR.setPower(0);
            FL.setPower(0);
            BR.setPower(0);
            BL.setPower(0);

            // Turn off RUN_TO_POSITION
            FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            //  sleep(250);   // optional pause after each move
        }
    }




    //spline

    public void splineDrive(double lspeed, double rspeed,
                            double leftInches, double rightInches,
                            double timeoutS)
    {

        int newLeftFrontTarget = 0;
        int newRightFrontTarget = 0;
        int newLeftBackTarget = 0;
        int newRightBackTarget= 0;

        // Ensure that the opmode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller

            newLeftFrontTarget = FL.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newRightFrontTarget = FR.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            newLeftBackTarget = BL.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            newRightBackTarget = BR.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);

            FR.setTargetPosition(newRightFrontTarget);
            FL.setTargetPosition(newLeftFrontTarget);
            BR.setTargetPosition(newRightBackTarget);
            BL.setTargetPosition(newLeftBackTarget);

            // Turn On RUN_TO_POSITION
            FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            FR.setPower(Math.abs(rspeed));
            FL.setPower(Math.abs(lspeed));
            BR.setPower(Math.abs(rspeed));
            BL.setPower(Math.abs(lspeed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test.
            while (opModeIsActive() &&
                    (runtime.seconds() < 31.0) &&
                    (FR.isBusy() && FL.isBusy() && (BR.isBusy() && (BL.isBusy())))) {

                // Display it for the driver.
                telemetry.addData("Path1",  "Running to %7d :%7d", newLeftFrontTarget,  newRightFrontTarget);
                telemetry.addData("Path2",  "Running at %7d :%7d", newLeftBackTarget, newRightBackTarget);

                telemetry.update();
            }

            // Stop all motion;
            FR.setPower(0);
            FL.setPower(0);
            BR.setPower(0);
            BL.setPower(0);
            // Turn off RUN_TO_POSITION
            FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            //  sleep(250);   // optional pause after each move
        }
    }
    //Strafe Drive Method:

    public void strafeDrive(double speed,
                            double leftInches, double rightInches,
                            double timeoutS)
    {

        int newLeftFrontTarget = 0;
        int newRightFrontTarget = 0;
        int newLeftBackTarget = 0;
        int newRightBackTarget = 0;

        // Ensure that the opmode is still active
        //if (opModeIsActive()) {

        // Determine new target position, and pass to motor controller

        newLeftFrontTarget = FL.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
        newRightFrontTarget = FR.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
        newLeftBackTarget = BL.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
        newRightBackTarget = BR.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);

        FR.setTargetPosition(newRightFrontTarget);
        FL.setTargetPosition(-newLeftFrontTarget);
        BR.setTargetPosition(newRightBackTarget);
        BL.setTargetPosition(-newLeftBackTarget);

        // Turn On RUN_TO_POSITION
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        // reset the timeout time and start motion.
        runtime.reset();
        FR.setPower(Math.abs(speed));
        FL.setPower(Math.abs(speed));
        BR.setPower(Math.abs(speed));
        BL.setPower(Math.abs(speed));

        // keep looping while we are still active, and there is time left, and both motors are running.
        // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
        // its target position, the motion will stop.  This is "safer" in the event that the robot will
        // always end the motion as soon as possible.
        // However, if you require that BOTH motors have finished their moves before the robot continues
        // onto the next step, use (isBusy() || isBusy()) in the loop test.
        while (opModeIsActive() &&
                (runtime.seconds() < 31.0) &&
                (FR.isBusy() && FL.isBusy() && (BR.isBusy() && (BL.isBusy())))) {

            // Display it for the driver.

            telemetry.update();
        }

        // Stop all motion;
        FR.setPower(0);
        FL.setPower(0);
        BR.setPower(0);
        BL.setPower(0);

        // Turn off RUN_TO_POSITION
        FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);


        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    }

    //--------------------------------------------------------------------------------------------------------//

}
