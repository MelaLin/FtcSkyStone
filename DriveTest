package org.firstinspires.ftc.teamcode.MovementClass;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.Telemetry;

@Autonomous(name = "DriveTest")

public class DriveTest extends LinearOpMode {
    private DcMotor FR = null;
    private DcMotor FL = null;
    private DcMotor BR = null;
    private DcMotor BL = null;
   private movement robot = null;

    private ElapsedTime runtime = new ElapsedTime();
   //private Telemetry telemetry = null;
    static final double TICKS_PER_REV = 537.6;    // eg: TETRIX Motor Encoder
    static final double DRIVE_GEAR_REDUCTION = 1;     // This is < 1.0 if geared UP
    static final double WHEEL_DIAMETER_INCHES = 3.93701;     // For figuring circumference
    static final double COUNTS_PER_INCH = (TICKS_PER_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);

    static final double DRIVE_SPEED = 0.6;
    static final double TURN_SPEED = 0.5;

    @Override
    public void runOpMode() throws InterruptedException

    {
        FL = hardwareMap.dcMotor.get("FL");
        FR = hardwareMap.dcMotor.get("FR");
        BR = hardwareMap.dcMotor.get("BR");
        BL = hardwareMap.dcMotor.get("BL");

        FR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        FL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BL.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        BR.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

//        FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
//        FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
//        BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
//        BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        FL.setDirection(DcMotor.Direction.REVERSE);
        BL.setDirection(DcMotor.Direction.REVERSE);
        telemetry.addData("Status" , "Running Skystone"); // Gold X pos.        telemetry.update();
        telemetry.update();

        waitForStart();
      move(.5,24,24,30);
        telemetry.addData("Status" , "Done Skystone"); // Gold X pos.        telemetry.update();
        telemetry.update();


    }

    public void move(double speed, double leftInches, double rightInches, double timeoutS) {

        int newLeftFrontTarget;
        int newRightFrontTarget;
        int newLeftBackTarget;
        int newRightBackTarget;

        // Ens  ure that the opmode is still active


        // Determine new target position, and pass to motor controller

        newLeftFrontTarget = FL.getCurrentPosition() + (int) (leftInches * COUNTS_PER_INCH);
        newRightFrontTarget = FR.getCurrentPosition() + (int) (rightInches * COUNTS_PER_INCH);
        newLeftBackTarget = BL.getCurrentPosition() + (int) (leftInches * COUNTS_PER_INCH);
        newRightBackTarget = BR.getCurrentPosition() + (int) (rightInches * COUNTS_PER_INCH);
        telemetry.addData("newLeftFrontTarget",newLeftFrontTarget);
        telemetry.update();


        FR.setTargetPosition(newRightFrontTarget);
        FL.setTargetPosition(newLeftFrontTarget);
        BR.setTargetPosition(newRightBackTarget);
        BL.setTargetPosition(newLeftBackTarget);

        // Turn On RUN_TO_POSITION
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        // reset the timeout time and start motion.
        // reset the timeout time and start motion.
        runtime.reset();
        FR.setPower(Math.abs(speed));
        FL.setPower(Math.abs(speed));
        BR.setPower(Math.abs(speed));
        BL.setPower(Math.abs(speed));


        // keep looping while we are still active, and there is time left, and both motors are running.
        // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
        // its target position, the motion will stop.  This is "safer" in the event that the robot will
        // always end the motion as soon as possible.
        // However, if you require that BOTH motors have finished their moves before the robot continues
        // onto the next step, use (isBusy() || isBusy()) in the loop test.
        while (opModeIsActive() &&
                (runtime.seconds() < 31.0) &&
                (FR.isBusy() && FL.isBusy() && (BR.isBusy() && (BL.isBusy())))) {

            telemetry.addData("Path1",  "Running to %7d :%7d", newLeftFrontTarget,  newRightFrontTarget);
            telemetry.addData("Path2",  "Running at %7d :%7d", newLeftBackTarget, newRightBackTarget);


            // FL.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
            // FR.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

            //this.telemetry.update();
        }
        // Stop all motion;
        FR.setPower(0);
        FL.setPower(0);
        BR.setPower(0);
        BL.setPower(0);



        // Turn off RUN_TO_POSITION
        FR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        FL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BR.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        BL.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

    }

    public void SetRunToPosition() {
        // Turn off RUN_TO_POSITION
        FR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BR.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BL.setMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    public void setPowerAll(double frSpeed, double flSpeed, double brSpeed, double blSpeed) {
        FR.setPower(frSpeed);
        FL.setPower(flSpeed);
        BR.setPower(brSpeed);
        BL.setPower(blSpeed);
    }


//lAST BRACE
}
